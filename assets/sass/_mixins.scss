@import "variables";
@import "typographic-hierarchy";

// Put all general mixins, and any helper functions, in this file.
// Mixins for a single pattern may be put in that pattern's scss file instead if that makes sense, use judgement.

@function get-px-from-rem($size_in_rem) {
  @return $size_in_rem * $font-size-base-in-px;
}

@function get-rem-from-px($size_in_px) {
  @return $size_in_px/$font-size-base-in-px;
}

@mixin font-size($size_in_px) {
  font-size: #{$size_in_px}px;
  font-size: get-rem-from-px($size_in_px) * 1rem;
}

@mixin padding($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    padding-#{$dimension}: #{$size_in_px}px;
    padding-#{$dimension}: #{get-rem-from-px($size_in_px)}rem;
  }
  @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();
    @each $size in $size_in_px {
      $parts-px: append($parts-px, #{$size}px, "space")
    }
    @each $size in $size_in_px {
      $parts-rem: append($parts-rem, #{get-rem-from-px($size)}rem, "space")
    }
    padding: $parts-px;
    padding: $parts-rem;
  }
  @else {
    padding: #{$size_in_px}px;
    padding: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin margin($size_in_px, $dimension: "") {
  @if $dimension == top or $dimension == right or $dimension == bottom or $dimension == left {
    margin-#{$dimension}: #{$size_in_px}px;
    margin-#{$dimension}: #{get-rem-from-px($size_in_px)}rem;
  }
  @else if $dimension == "" and type_of($size_in_px) == list {
    $parts-px: ();
    $parts-rem: ();
    @each $size in $size_in_px {
      $parts-px: append($parts-px, #{$size}px, "space")
    }
    @each $size in $size_in_px {
      $parts-rem: append($parts-rem, #{get-rem-from-px($size)}rem, "space")
    }
    margin: $parts-px;
    margin: $parts-rem;
  }
  @else {
    margin: #{$size_in_px}px;
    margin: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin height($size_in_px) {
  height: #{$size_in_px}px;
  height: #{get-rem-from-px($size_in_px)}rem;
}

@mixin width($size_in_px) {
  width: #{$size_in_px}px;
  width: #{get-rem-from-px($size_in_px)}rem;
}

@mixin constrain-width($size_in_px, $extreme) {
  @if $extreme == min or $extreme == max {
    #{$extreme}-width: #{$size_in_px}px;
    #{$extreme}-width: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin flexbox-centre-x-and-y {
  @supports (display: flex) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }
}

/*
 * Backwards compatible clearfix.
 * See http://nicolasgallagher.com/micro-clearfix-hack/
 */
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }

  zoom: 1; /* ie 6/7 */
}

@mixin hidden() {
  display: none;
}

@mixin unhidden($display-as: block) {
  display: $display-as;
}

@mixin visuallyhidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin visuallyunhidden() {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: auto;
  position: static;
  width: auto;
}

@mixin box-shadow() {
  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.5);
}

@mixin tooltip-box() {
  background-color: $color-text-ui-background--reverse;
  color: $color-text-ui-background;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);
  @include padding(16);
}

@mixin border-radius-simple($top-left: $border-radius, $top-right: 0, $bottom-left: 0, $bottom-right: 0) {
  border-radius: #{$top-left}px #{$top-right}px #{$bottom-left}px #{$bottom-right}px;
}

@mixin arrow($direction: "up", $size: 7, $color: $color-text-ui-background--reverse) {
  border-style: solid;
  border-width: #{$size}px;
  border-color: transparent;

  @if $direction == "right" {
    border-left-color: $color;
    border-right-width: 0;

  } @else if $direction == "down" {
    border-bottom-width: 0;
    border-top-color: $color;

  } @else if $direction == "left" {
    border-left-width: 0;
    border-right-color: $color;

  } @else if $direction == "up" {
    border-bottom-color: $color;
    border-top-width: 0;
  }
  content: "";
  height: 0;
  width: 0;
}

// From https://codepen.io/jonneal/pen/kptBs
@mixin chevron ($direction: "top", $colour: white, $size: 1em) {
  border-color: $colour;
  border-style: solid;
  border-width: 0.25em 0.25em 0 0;
  content: "";
  display: inline-block;
  height: $size;
  position: relative;
  top: -1px;
  vertical-align: middle;
  width: $size;

  @if $direction == "top" {
    transform: rotate(-45deg);
  } @else if $direction == "right" {
    transform: rotate(45deg);
  } @else if $direction == "bottom" {
    transform: rotate(135deg);
  } @else if $direction == "left" {
    transform: rotate(-135deg);
  }

}

@mixin loading-spinner($torus-width: 5, $size: 22,
                       $highlight-color: $color-primary, $base-color: rgba(255, 255, 255, 0.2)) {
  animation: full-rotation 1.1s infinite linear;
  border: #{$torus-width}px solid $base-color;
  border-left: #{$torus-width}px solid $highlight-color;
  border-radius: 50%;
  display: block;
  height: #{$size}px;
  overflow: hidden;
  text-indent: -9999em;
  transform: translateZ(0);
  width: #{$size}px;

  @keyframes full-rotation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

}

@mixin nospace($direction: "all") {
  @if $direction == "all" {
    margin: 0;
    padding: 0;
  } @else if $direction == "top" {
    margin-top: 0;
    padding-top: 0;
  } @else if $direction == "right" {
    margin-right: 0;
    padding-right: 0;
  } @else if $direction == "bottom" {
    margin-bottom: 0;
    padding-bottom: 0;
  } @else if $direction == "left" {
    margin-left: 0;
    padding-left: 0;
  }
}

@mixin wrapper($padding: true) {
  box-sizing: content-box;
  @include constrain-width($max-site-width, "max");
  margin: auto;

  @if $padding {
    padding-left: 7%;
    padding-right: 7%;

    @media only screen and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
      padding-left: 14%;
      padding-right: 14%;
    }

    @media only screen and (min-width: #{get-rem-from-px($bkpt-site--x-wide)}em) {
      padding-left: 3%;
      padding-right: 3%;
    }
  }
}

// $vertical-height-in-px: desired height of the element as a function of font-size and line-height
// TODO: Devise a good name (& extend blg name system?), for the default vertical height
@mixin font-size-and-vertical-height($font-size-in-px, $vertical-height-in-px: 24) {
  @include font-size($font-size-in-px);
  line-height: #{($vertical-height-in-px / $font-size-in-px)};
}

@mixin body-para {
  @include body-typeg();
  @include body-spacing();
}

// Baseline grid
@mixin blg-spacing($direction, $level, $type: "padding") {
  @if $type == "padding" {
    @if $level == "extra-small" {
      @include padding($blg-space-extra-small-in-px, $direction);
    } @else if $level == "small" {
      @include padding($blg-space-small-in-px, $direction);
    } @else if $level == "smallish" {
      @include padding($blg-space-smallish-in-px, $direction);
    } @else if $level == "medium" {
      @include padding($blg-space-medium-in-px, $direction);
    } @else if $level == "large" {
      @include padding($blg-space-large-in-px, $direction);
    }
  } @else if $type == "margin" {
    @if $level == "extra-small" {
      @include margin($blg-space-extra-small-in-px, $direction);
    } @else if $level == "small" {
      @include margin($blg-space-small-in-px, $direction);
    } @else if $level == "smallish" {
      @include margin($blg-space-smallish-in-px, $direction);
    } @else if $level == "medium" {
      @include margin($blg-space-medium-in-px, $direction);
    } @else if $level == "large" {
      @include margin($blg-space-large-in-px, $direction);
    }
  }
}

// Cross-pattern common style expressions

@mixin teaser-root-style() {
  border-top: 1px solid $color-text-dividers;
  @include padding($teaser-spacing-top 0 0 0);
  // margin not padding here as we want the margin to collapse for the last item in the list within a listing container
  // where that listing container also has a margin on the bottom.
  @include margin($teaser-spacing-bottom, "bottom");

  // TODO: Move to listing-list
  .listing-list__item:first-child & {
    border-top-style: none;
  }

  &:after {
    content: "";
    clear: both;
    display: block;
    float: none;
  }
}

@mixin teaser-context-label-style() {
  @include label-subject-typeg();
  color: $color-text-secondary;
}

@mixin teaser-context-label-list-style {
  @include label-content-typeg();
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: relative;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin teaser-context-label-list-item-style {
  display: inline;
  list-style-type: none;
  padding: 0;
}

@mixin teaser-header-text-style() {
  @include listing-main-art-title-typeg();
  @include blg-spacing("top", "extra-small");
}

@mixin teaser-header-text-link-style() {
  color: $color-text;
  text-decoration: none;

  &:hover {
    color: $color-primary-dark;
  }

}

@mixin teaser-footer-style() {
  @include blg-spacing("top", "extra-small", "margin");
  color: $color-text-secondary;
  display: flex;
  @include label-content-typeg();
  justify-content: space-between;
  text-transform: none;
}

@mixin teaser-body-style() {
  @include listing-impact-statement-typeg();
  @include nospace("bottom");
}

@mixin dismissible_navigation {
  @include typeg-portal-quick-nav();
  @include font-size-and-vertical-height($font-size-base-in-px, 48);
  @include nospace();
  text-align: center;
}

@mixin checkbox-label() {
  @include typeg-form-label();
  @include blg-spacing("bottom", "extra-small");
  display: block;
}

@mixin overlay() {
  background-color: $color-overlay;
  position: fixed;
  min-height: 100vh;
  top: 0;
  width: 100vw;
  // z-index should be overridden as necessary
  z-index: 4;
}

@mixin discreet-link ($color: $color-text) {
  border-bottom: 1px dotted $color;
  color: $color;
  text-decoration: none;

  &:hover {
    border-bottom-color: $color-primary;
    color: $color-primary;
  }
}

@mixin popup_title_text {
  @include font-size-and-vertical-height($font-size-small-in-px, 20);
}

@mixin popup-ancillary-text() {
  color: $color-text--reverse;
  font-family: $font-secondary;
  @include font-size-and-vertical-height(11, 18);
}

@mixin popup-large-ancillary-text() {
  color: $color-text--reverse;
  font-family: $font-secondary;
  @include font-size-and-vertical-height($font-size-small-in-px, 20);
}

@mixin inline-image {
  margin-bottom: 0.1em;
  max-height: 1em;
  vertical-align: middle;
}

@mixin colors($background-color: $color-primary, $border-color: $background-color, $color: $color-text--reverse) {
  background-color: $background-color;
  border: 1px solid $border-color;
  color: $color;
}

@mixin non_js_control_link {
  color: $color-text;
  font-family: $font-secondary;
  @include font-size-and-vertical-height($font-size-small-in-px);
  font-weight: normal;
  text-decoration: underline;
  text-transform: none;

  &:hover {
    text-decoration: underline;
  }
}
